<style type="text/css">
  * { margin:0; padding:0; } /* to remove the top and left whitespace */
  html, body { width:100%; height:100%; } /* just to be sure these are full screen*/
  canvas { display:block; } /* To remove the scrollbars */
</style>
<div>
  <canvas id="lifeCanvas" width="800" height="800"></canvas>
</div>
<script type="text/javascript">
  "use strict";

  const BRICK_W = 10;
  const BRICK_H = 10;
  const BRICK_GAP = 2;
  const BRICK_COLS = 80;
  const BRICK_ROWS = 80;
  var brickGrid = new Array(BRICK_COLS * BRICK_ROWS);
  var brickScores = new Array(BRICK_COLS * BRICK_ROWS);
  var change = 1;
  var ratio = 1;
  var scalex = 1;
  var scaley = 1;
  var filledscreen = false;
  const PADDLE_WIDTH = 30;
  const PADDLE_THICKNESS = 30;
  var paddleX = 400;
  var paddleY = 400;
  var canvas;
  var canvasContext;
  var mouseX = 0;
  var mouseY = 0;
  var life = 0;
  var eachCol; 
  var eachRow;
  var i;
  var f;
  var arrayIndex;
  var fullcanvas;

  document.addEventListener("turbolinks:load", function() { //Document Ready specified for turbolinks - Needed to fire correctly in Rails 5.0 envoironment
  });// End of Document Ready Turbolinks enclosure

  canvas = document.getElementById('lifeCanvas'); // Get the canvas reference from DOM
  canvasContext = canvas.getContext('2d'); // Get the canvas context

  canvas.addEventListener('mousemove', updateMousePos, false); // listen for mousemovement
  window.addEventListener('click', function(e) { // listen for clicks         
    updateMousePos(e);
    fullscreen();  // single fire version of fullscreen added to click      
  }, false);
  window.addEventListener('touchstart', function(e) { // listen for touches           
    updateMousePos(e.touches[0]);
  }, false);
  window.addEventListener('touchmove', function(e) {
    updateMousePos(e.touches[0]);
    e.preventDefault(); // no zoom or scroll
  }, false);
  window.addEventListener('touchend', function(e) {
    updateMousePos(e.touches[0]);
    e.preventDefault(); // no zoom or scroll
  }, false);

  var flip = document.getElementsByClassName("canvasflip"); // Get rid of the BootStrap menu 
  for (f = 0; f < flip.length; f += 1) {
    flip[f].outerHTML = ""; // Empty all elements in array
  }

  var framesPerSecond = 20;
  setInterval(updateAll, 1000/framesPerSecond); // Set the timer
  brickReset();// Initial Random Map

  function updateAll() { // General Functions
    resize();
    moveAll();
    input();
    drawAll();
  }

  function moveAll() {
    scoreBricks();
    flipBricks();
  }

  function drawAll() {
    colorRect(0,0, canvas.width,canvas.height, 'black'); // clear screen
    colorRect(paddleX, paddleY, PADDLE_WIDTH,PADDLE_THICKNESS, 'green');// Draw Paddle
    drawBricks();
    colorText(mouseX+","+mouseY, mouseX/scalex,mouseY/scaley, 'yellow');// Draw Debug Paddle Text
  }

  function input() {
    var mouseBrickCol = Math.floor((mouseX/scalex) / BRICK_W); // Round values to save processor cycles
    var mouseBrickRow = Math.floor((mouseY/scaley) / BRICK_H); // When computing scale(From resize function) of cursor position
    var brickIndexUnderMouse = rowColToArrayIndex(mouseBrickCol, mouseBrickRow); // brickIndexUnderMouse is true if Index is matched
    if(brickIndexUnderMouse >= 0 && brickIndexUnderMouse < BRICK_COLS * BRICK_ROWS) { // And if so
      brickGrid[brickIndexUnderMouse] = false; // Mark that square to be deleted
    }
  }

  function drawBricks() {
    for(eachRow=0;eachRow<BRICK_ROWS;eachRow += 1) { // For Each Column
      for(eachCol=0;eachCol<BRICK_COLS;eachCol += 1) { // And Each Row
        arrayIndex = rowColToArrayIndex(eachCol, eachRow); // Compute the Index
        if(brickGrid[arrayIndex]) { // And if that index reads true
          colorRect(BRICK_W*eachCol,BRICK_H*eachRow, BRICK_W-BRICK_GAP,BRICK_H-BRICK_GAP, 'blue'); // Draw a Blue square
        }
      }
    }
  }

  function scoreBricks() {  // Scoring the bricks - playfield must be square and corners don't score correctly yet
    for (i = 0; i < brickGrid.length; i += 1) {
      life = 0;
      if (brickGrid[i - 1] === true) { // Code for Scoring Sides
        life = life + 1;
      }
      if (brickGrid[i + 1] === true) {
        life = life + 1;
      }
      if (brickGrid[i + BRICK_ROWS] === true) {
        life = life + 1;
      }
      if (brickGrid[i - BRICK_ROWS] === true) {
        life = life + 1;
      }     
      if (brickGrid[i + BRICK_ROWS - 1] === true) { // Code for scoring diagonals
        life = life + 1;
      }
      if (brickGrid[i + BRICK_ROWS + 1] === true) {
        life = life + 1;
      }
      if (brickGrid[i - BRICK_ROWS - 1] === true) {
        life = life + 1;
      }
      if (brickGrid[i - BRICK_ROWS + 1] === true) {
        life = life + 1;
      }
      brickScores[i] = life;
    }
  }

  function flipBricks() { // Resets the entire board if there were less than x or 70 moves left
    change = 0; // Amount the board has changed per turn starts at zero
    for (i = 0; i < brickGrid.length; i += 1) { // For every brick in the Grid:
      if (brickGrid[i]) {
        if (brickScores[i] < 2 || brickScores[i] > 3) { // If it's lifescore is under 2 or over 3
          brickGrid[i] = false; // Kill it
          change = change + 1; // And add 1 to the change counter
        } 
      }
      else {
        if (brickScores[i] === 3) { // But if it equals 3 exactly
          brickGrid[i] = true; // Set it as alive
          change = change + 1; // And add 1 to the change counter
        }
      }
    }
    if (change < 70) { // If the change counter is less than set amount
      brickReset(); // Reset the board
    } 
  }

  function updateMousePos(evt) {
    var rect = canvas.getBoundingClientRect(); // Get the size of the canvas
    var root = document.documentElement; // Get the document root from the DOM
    mouseX = evt.clientX - rect.left - root.scrollLeft; // Get the origin for the Left
    mouseY = evt.clientY - rect.top - root.scrollTop; // and top sides of the screen
    paddleX = mouseX / scalex - PADDLE_WIDTH/2; // Place the paddle on screen after factoring the scale
    paddleY = mouseY / scaley - PADDLE_THICKNESS/2;
  }

  function brickReset() {
    for(i=0;i<BRICK_COLS * BRICK_ROWS;i += 1) { // for all of the columns in all the rows
      if(Math.random() < 0.15) { // Completely Randomize their life state
        brickGrid[i] = true;
      }
      else {
        brickGrid[i] = false;
      }
    }
  }

  function rowColToArrayIndex(col, row) { // calculate the index within the column array based on position
    return col + BRICK_COLS * row;
  }

  function colorRect(topLeftX,topLeftY, boxWidth,boxHeight, fillColor) { // General canvas Rectangle function
    canvasContext.fillStyle = fillColor;
    canvasContext.fillRect(topLeftX,topLeftY, boxWidth,boxHeight);
  }

  function colorCircle(centerX,centerY, radius, fillColor) { // General canvas Circle function
    canvasContext.fillStyle = fillColor;
    canvasContext.beginPath();
    canvasContext.arc(centerX,centerY, radius, 0,Math.PI*2, true);
    canvasContext.fill();
  }

  function colorText(showWords, textX,textY, fillColor) { // General canvas Text function
    canvasContext.fillStyle = fillColor;
    canvasContext.fillText(showWords, textX,textY);
  }

  function resize() { // resizes the canvas to the window width and height
    if (canvas.currentHeight !== window.innerHeight || canvas.currentWidth !== window.innerWidth) { // If we're not already perfectly sized for width and height
      canvas.currentHeight = window.innerHeight; // Size us with the height first
      ratio = window.innerWidth / window.innerHeight; // Then compute the aspect ratio of the window
      
      canvas.currentWidth = canvas.currentHeight * ratio; // And resize the width to that ratio
      scalex = canvas.currentWidth / 800; // Our scale can now be computed based upon the original width
      scaley = canvas.currentHeight / 800; // And height of the canvas vs it's new size, which we'll need for correct input
      canvas.style.width = canvas.currentWidth + 'px'; // scale the canvas with CSS
      canvas.style.height = canvas.currentHeight + 'px';
    }
  }

  function fullscreen(){ // Requests FullScreen from the browser on the first click
    if(filledscreen === false) { // If we haven't tried this before
     if(canvas.webkitRequestFullScreen) { // And if this is Chrome or Safari
         canvas.webkitRequestFullScreen(); // Go for the webkit fullscreen Request
     }
    else {
       canvas.mozRequestFullScreen(); // Else we'll try the Mozilla fullscreen Request
    }     
    filledscreen = true;  // Now we've tried this once.
    }              
  }

</script>